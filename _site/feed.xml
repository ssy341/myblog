<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.2">Jekyll</generator><link href="http://www.thxopen.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://www.thxopen.com/" rel="alternate" type="text/html" /><updated>2019-06-13T15:32:24+08:00</updated><id>http://www.thxopen.com/</id><title type="html">单客欧朋</title><subtitle>好记性不如烂笔头</subtitle><author><name>单思义</name><email>keith@thxopen.com</email></author><entry><title type="html">Datatables的4大特性-dom的介绍</title><link href="http://www.thxopen.com/datatables/2019/06/09/datatables-dom-option.html" rel="alternate" type="text/html" title="Datatables的4大特性-dom的介绍" /><published>2019-06-09T00:00:00+08:00</published><updated>2019-06-09T00:00:00+08:00</updated><id>http://www.thxopen.com/datatables/2019/06/09/datatables-dom-option</id><content type="html" xml:base="http://www.thxopen.com/datatables/2019/06/09/datatables-dom-option.html">&lt;p&gt;本节为Datatables入门第二期 ——《使用Datatables”武装”你的html表格》的第一节，主要讲dom。&lt;/p&gt;

&lt;h2 id=&quot;课程简介&quot;&gt;课程简介&lt;/h2&gt;

&lt;p&gt;何为dom，它是一个磨人的小妖精，之所以把dom放在开篇，我个人觉得它是一个核心，也是一个进入Datatables大门的钥匙，理解了dom
算是使用Datatables的入门选手了。废话不多说，跟着视频来，看看dom究竟是什么？&lt;/p&gt;

&lt;p&gt;本节课程我从以下几个点来讲解：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何使用Datatables？&lt;/li&gt;
  &lt;li&gt;理解Datatables基本模型DOM
    &lt;ul&gt;
      &lt;li&gt;length changing&lt;/li&gt;
      &lt;li&gt;filter&lt;/li&gt;
      &lt;li&gt;information&lt;/li&gt;
      &lt;li&gt;pagination&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DOM引发的一系列”血案”，解密真相，揭开谜底
    &lt;ul&gt;
      &lt;li&gt;它的控件我不喜欢，想隐藏掉，怎么做？&lt;/li&gt;
      &lt;li&gt;表格上下都有翻页控件，怎么做?&lt;/li&gt;
      &lt;li&gt;按照自己的意愿摆放它的控件，怎么做？&lt;/li&gt;
      &lt;li&gt;我需要多个条件过滤，它只有一个搜索框，怎么做？&lt;/li&gt;
      &lt;li&gt;Bootstrap的布局自适应，使用很方便，Datatables可以套用么，怎么做？&lt;/li&gt;
      &lt;li&gt;改变各个控件的显示位置，怎么做？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过简单的入门，原理的介绍，还有真实的案例，三部曲带领大家走进Datatables的大门。&lt;/p&gt;

&lt;h2 id=&quot;课程视频&quot;&gt;课程视频&lt;/h2&gt;

&lt;p&gt;由于服务器不支持视频播放，鼠标右键&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;/video/season_two/season2-02.mp4&quot;&gt;点我&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;，另存为到本地即可&lt;/p&gt;

&lt;p&gt;最后，谢谢大家的支持，如有错误的地方还望指出，如果您还有其他的建议或要求，欢迎在下方留言&lt;/p&gt;</content><author><name>单思义</name><email>keith@thxopen.com</email></author><category term="datatables" /><category term="视频" /><category term="入门第二期" /><summary type="html">本节为Datatables入门第二期 ——《使用Datatables”武装”你的html表格》的第一节，主要讲dom。 课程简介 何为dom，它是一个磨人的小妖精，之所以把dom放在开篇，我个人觉得它是一个核心，也是一个进入Datatables大门的钥匙，理解了dom 算是使用Datatables的入门选手了。废话不多说，跟着视频来，看看dom究竟是什么？ 本节课程我从以下几个点来讲解： 如何使用Datatables？ 理解Datatables基本模型DOM length changing filter information pagination DOM引发的一系列”血案”，解密真相，揭开谜底 它的控件我不喜欢，想隐藏掉，怎么做？ 表格上下都有翻页控件，怎么做? 按照自己的意愿摆放它的控件，怎么做？ 我需要多个条件过滤，它只有一个搜索框，怎么做？ Bootstrap的布局自适应，使用很方便，Datatables可以套用么，怎么做？ 改变各个控件的显示位置，怎么做？ 通过简单的入门，原理的介绍，还有真实的案例，三部曲带领大家走进Datatables的大门。 课程视频 由于服务器不支持视频播放，鼠标右键点我，另存为到本地即可 最后，谢谢大家的支持，如有错误的地方还望指出，如果您还有其他的建议或要求，欢迎在下方留言</summary></entry><entry><title type="html">使用OBS录制屏幕</title><link href="http://www.thxopen.com/tools/2019/06/08/record-screen-with-obs.html" rel="alternate" type="text/html" title="使用OBS录制屏幕" /><published>2019-06-08T00:00:00+08:00</published><updated>2019-06-08T00:00:00+08:00</updated><id>http://www.thxopen.com/tools/2019/06/08/record-screen-with-obs</id><content type="html" xml:base="http://www.thxopen.com/tools/2019/06/08/record-screen-with-obs.html">&lt;p&gt;由于要制作Datatables入门第二期视频，需要用到屏幕录制，在网上搜索了很多软件，最后发现&lt;a href=&quot;https://obsproject.com/&quot;&gt;OBS&lt;/a&gt;非常好。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;OBS Studio - Free and open source software for live streaming and screen recording&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;OBS Studio - 直播和屏幕录制的免费开源软件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个简直太合我意了（偷笑中），不仅免费，而且功能强大，独乐了不如众乐乐，分享下如何使用OBS录制自己的屏幕。&lt;/p&gt;

&lt;h2 id=&quot;下载安装&quot;&gt;下载安装&lt;/h2&gt;

&lt;p&gt;你可以通过&lt;a href=&quot;https://obsproject.com/download&quot;&gt;官网&lt;/a&gt;下载对应的版本，支持windows、mac和linux。本次选择mac版作为例子来讲解。&lt;/p&gt;

&lt;h2 id=&quot;录制屏幕&quot;&gt;录制屏幕&lt;/h2&gt;

&lt;h3 id=&quot;指定窗口录制&quot;&gt;指定窗口录制&lt;/h3&gt;

&lt;p&gt;和其他录制屏幕软件不同的是，OBS它可以指定应用程序窗口来录制，这样即便你在操作其他软件，也不会影响到录制&lt;/p&gt;

&lt;p&gt;软件打开后，默认会有一个场景，在对应场景里选中【窗口捕获】，点击下方的⚙配置选择窗口捕获来源&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/tools/obs/windows-target-1.png&quot; alt=&quot;windows-target-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在下拉列表里可以选择你要捕获的窗口，每个应用程序都会列在这里&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/tools/obs/windows-target-2.png&quot; alt=&quot;windows-target-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过上面两个步骤的设置，就可以录制选定窗口&lt;/p&gt;

&lt;h3 id=&quot;不同应用程序切换&quot;&gt;不同应用程序切换&lt;/h3&gt;

&lt;p&gt;在录制Datatables入门第二期视频时，会在ppt和IDE应用程序之间来回切换，这样就需要使用场景来实现。&lt;/p&gt;

&lt;p&gt;首先，点击左下角场景区域➕，新建一个场景，按照自己的需要命名&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/tools/obs/scene-1.png&quot; alt=&quot;scene-1&quot; /&gt;
&lt;img src=&quot;/assets/images/post/tools/obs/scene-2.png&quot; alt=&quot;scene-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其次，点击来源区域➕，新建捕获来源
&lt;img src=&quot;/assets/images/post/tools/obs/target-1.png&quot; alt=&quot;target-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择窗口捕获
&lt;img src=&quot;/assets/images/post/tools/obs/target-2.png&quot; alt=&quot;target-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按照自己的需要命名
&lt;img src=&quot;/assets/images/post/tools/obs/target-3.png&quot; alt=&quot;target-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择窗口捕获来源
&lt;img src=&quot;/assets/images/post/tools/obs/target-4.png&quot; alt=&quot;target-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后就有两个场景可供录制
&lt;img src=&quot;/assets/images/post/tools/obs/target-5.png&quot; alt=&quot;target-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们为场景指定不同的快捷键，这样切换场景的时候就不用回到OBS软件操作&lt;/p&gt;

&lt;p&gt;点击上图右下方【设置】按钮，进入【热键】设置部分，给场景切换指定快捷键，这样在录制的时候我们可以随时切换录制那个场景&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/tools/obs/settings-1.png&quot; alt=&quot;settings-1&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：不要设置和其他软件冲突的快捷键，不然会起冲突导致切换场景失效&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;录制电脑输出声音&quot;&gt;录制电脑输出声音&lt;/h2&gt;

&lt;p&gt;默认设置下，视频录制的声音来自麦克风&lt;/p&gt;

&lt;p&gt;如果我在电脑上播放歌曲，这时候声音从扬声器播放，然后被麦克风采集（注意看下图两处红色框框，上方的代表在播放音乐，下方代表麦克风采集到扬声器声音）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/tools/obs/sound-1.png&quot; alt=&quot;sound-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果我想电脑的声音直接被OBS采集而不是通过麦克风采集，这里需要用到虚拟声卡 —— Soundflower&lt;/p&gt;

&lt;h3 id=&quot;第一步安装soundflower&quot;&gt;第一步：安装Soundflower&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Soundflower - a free audio system extension that allows applications to pass audio to other applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Soundflower - 一款免费的音频系统扩展，允许应用程序将音频传递到其他的应用程序。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先下载安装&lt;a href=&quot;https://soundflower.en.softonic.com/mac&quot;&gt;Soundflower&lt;/a&gt;，安装完成后打开【Launchpad】找到【音频MIDI设置】&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/tools/obs/midi-settings-1.png&quot; alt=&quot;midi-settings-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击左下角➕ =》【创建多输出设备】=》点击标题处可以命名，这里重命名为【obs】=》勾选【内建输出】和【Soundflower(2ch)】&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/tools/obs/midi-settings-2.png&quot; alt=&quot;midi-settings-2&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;解释：这里创建多输出设备的用意在于在录制屏幕的时候同时可以听到电脑输出的声音，如果不设置录制视频的时候自己听不到声音，但视频可以采集到电脑输出的声音&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;第二步配置obs&quot;&gt;第二步：配置OBS&lt;/h3&gt;

&lt;p&gt;上面配置好的虚拟声卡后，在OBS【设置】界面  =》 【音频】 =》 桌面音频设备选择【Soundflower(ch2)】 =》 麦克风/辅助音频设备选择【已禁用】&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/tools/obs/obs-settings-1.png&quot; alt=&quot;obs-settings-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后电脑声音输出选择第一步新建的【obs】虚拟声卡&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/tools/obs/mac-sound-settings-1.png&quot; alt=&quot;mac-sound-settings-1.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;解释：由于obs是两个设备，一个是内置的扬声器，一个是虚拟声卡Soundflower(2ch)，这里选择输出设备为obs意味着声卡将会把声音从这两个设备输出，
而在上面OBS 【音频】 设置里，我们把桌面音频设备选择的是Soundflower(2ch)，即我们想要的，录制的声音直接从电脑声卡采集，而不是从麦克风&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;ps: 在选择obs输出之前，请先调好声音大小，因为选择obs后将不能修改声音&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过上面两步设置，我们录制屏幕的时候，声音就可以直接采集从电脑声卡输出的声音了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/tools/obs/obs-record-1.png&quot; alt=&quot;obs-record-1.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;第一个红框表示电脑正在播放音乐&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;第二个红框表示OBS采集到声卡的输出&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>单思义</name><email>keith@thxopen.com</email></author><category term="obs" /><category term="tools" /><category term="录屏软件" /><summary type="html">由于要制作Datatables入门第二期视频，需要用到屏幕录制，在网上搜索了很多软件，最后发现OBS非常好。 OBS Studio - Free and open source software for live streaming and screen recording OBS Studio - 直播和屏幕录制的免费开源软件 这个简直太合我意了（偷笑中），不仅免费，而且功能强大，独乐了不如众乐乐，分享下如何使用OBS录制自己的屏幕。 下载安装 你可以通过官网下载对应的版本，支持windows、mac和linux。本次选择mac版作为例子来讲解。 录制屏幕 指定窗口录制 和其他录制屏幕软件不同的是，OBS它可以指定应用程序窗口来录制，这样即便你在操作其他软件，也不会影响到录制 软件打开后，默认会有一个场景，在对应场景里选中【窗口捕获】，点击下方的⚙配置选择窗口捕获来源 在下拉列表里可以选择你要捕获的窗口，每个应用程序都会列在这里 通过上面两个步骤的设置，就可以录制选定窗口 不同应用程序切换 在录制Datatables入门第二期视频时，会在ppt和IDE应用程序之间来回切换，这样就需要使用场景来实现。 首先，点击左下角场景区域➕，新建一个场景，按照自己的需要命名 其次，点击来源区域➕，新建捕获来源 选择窗口捕获 按照自己的需要命名 选择窗口捕获来源 最后就有两个场景可供录制 我们为场景指定不同的快捷键，这样切换场景的时候就不用回到OBS软件操作 点击上图右下方【设置】按钮，进入【热键】设置部分，给场景切换指定快捷键，这样在录制的时候我们可以随时切换录制那个场景 注意：不要设置和其他软件冲突的快捷键，不然会起冲突导致切换场景失效 录制电脑输出声音 默认设置下，视频录制的声音来自麦克风 如果我在电脑上播放歌曲，这时候声音从扬声器播放，然后被麦克风采集（注意看下图两处红色框框，上方的代表在播放音乐，下方代表麦克风采集到扬声器声音） 如果我想电脑的声音直接被OBS采集而不是通过麦克风采集，这里需要用到虚拟声卡 —— Soundflower 第一步：安装Soundflower Soundflower - a free audio system extension that allows applications to pass audio to other applications. Soundflower - 一款免费的音频系统扩展，允许应用程序将音频传递到其他的应用程序。 首先下载安装Soundflower，安装完成后打开【Launchpad】找到【音频MIDI设置】 点击左下角➕ =》【创建多输出设备】=》点击标题处可以命名，这里重命名为【obs】=》勾选【内建输出】和【Soundflower(2ch)】 解释：这里创建多输出设备的用意在于在录制屏幕的时候同时可以听到电脑输出的声音，如果不设置录制视频的时候自己听不到声音，但视频可以采集到电脑输出的声音 第二步：配置OBS 上面配置好的虚拟声卡后，在OBS【设置】界面 =》 【音频】 =》 桌面音频设备选择【Soundflower(ch2)】 =》 麦克风/辅助音频设备选择【已禁用】 然后电脑声音输出选择第一步新建的【obs】虚拟声卡 解释：由于obs是两个设备，一个是内置的扬声器，一个是虚拟声卡Soundflower(2ch)，这里选择输出设备为obs意味着声卡将会把声音从这两个设备输出， 而在上面OBS 【音频】 设置里，我们把桌面音频设备选择的是Soundflower(2ch)，即我们想要的，录制的声音直接从电脑声卡采集，而不是从麦克风 ps: 在选择obs输出之前，请先调好声音大小，因为选择obs后将不能修改声音 通过上面两步设置，我们录制屏幕的时候，声音就可以直接采集从电脑声卡输出的声音了 第一个红框表示电脑正在播放音乐 第二个红框表示OBS采集到声卡的输出</summary></entry><entry><title type="html">Ctrl+C 和 Ctrl+V 是如何工作的？ - How does Ctrl+c and Ctrl+v work?</title><link href="http://www.thxopen.com/life/2019/05/20/how-does-ctrl-c-and-ctrl-v-work.html" rel="alternate" type="text/html" title="Ctrl+C 和 Ctrl+V 是如何工作的？ - How does Ctrl+c and Ctrl+v work?" /><published>2019-05-20T00:00:00+08:00</published><updated>2019-05-20T00:00:00+08:00</updated><id>http://www.thxopen.com/life/2019/05/20/how-does-ctrl-c-and-ctrl-v-work</id><content type="html" xml:base="http://www.thxopen.com/life/2019/05/20/how-does-ctrl-c-and-ctrl-v-work.html">&lt;p&gt;本来忙着录视频，但运气不好跟公司发生了一点小矛盾，心情不美丽，所以就瞎逛，
在 StackExchange 上看到有人提问&lt;a href=&quot;https://superuser.com/questions/1436622/how-does-ctrlc-and-ctrlv-work&quot;&gt;“How does Ctrl+c and Ctrl+v work?”&lt;/a&gt;，
一下就吸引了我的目光，这两个快捷键可是说我们天天都在用，但你要我说出来是如何工作的？我还真是不晓得，不多说，
跟着提问者进去瞧瞧，到底是如何工作的？&lt;/p&gt;

&lt;p&gt;以下是译文:&lt;/p&gt;

&lt;h2 id=&quot;questionctrlc-和-ctrlv-是如何工作的&quot;&gt;Question：Ctrl+C 和 Ctrl+V 是如何工作的?&lt;/h2&gt;

&lt;p&gt;我一直很好奇，当我将图像（选择它使用快捷键Ctrl+c）复制到word文件（使用ctrl+v粘贴）&lt;a href=&quot;https://www.quora.com/What-does-under-the-hood-mean-in-programming&quot;&gt;幕后&lt;/a&gt;（操作系统层面）发生了什么事情？&lt;/p&gt;

&lt;h2 id=&quot;answer&quot;&gt;Answer&lt;/h2&gt;

&lt;h3 id=&quot;windows&quot;&gt;Windows&lt;/h3&gt;

&lt;p&gt;在windows下，剪贴板API和存储缓冲区是由OS提供（显然是内核级别）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ctrl+C 告诉程序使用 Win32 API 方法 &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/Winuser/nf-winuser-setclipboarddata&quot;&gt;SetClipboardData()&lt;/a&gt;去存储“被复制”的数据&lt;/li&gt;
&lt;/ul&gt;</content><author><name>单思义</name><email>keith@thxopen.com</email></author><category term="翻译" /><category term="好文" /><summary type="html">本来忙着录视频，但运气不好跟公司发生了一点小矛盾，心情不美丽，所以就瞎逛， 在 StackExchange 上看到有人提问“How does Ctrl+c and Ctrl+v work?”， 一下就吸引了我的目光，这两个快捷键可是说我们天天都在用，但你要我说出来是如何工作的？我还真是不晓得，不多说， 跟着提问者进去瞧瞧，到底是如何工作的？ 以下是译文: Question：Ctrl+C 和 Ctrl+V 是如何工作的? 我一直很好奇，当我将图像（选择它使用快捷键Ctrl+c）复制到word文件（使用ctrl+v粘贴）幕后（操作系统层面）发生了什么事情？ Answer Windows 在windows下，剪贴板API和存储缓冲区是由OS提供（显然是内核级别）： Ctrl+C 告诉程序使用 Win32 API 方法 SetClipboardData()去存储“被复制”的数据</summary></entry><entry><title type="html">请停止学习框架 - Stop Learning Frameworks</title><link href="http://www.thxopen.com/life/2019/05/14/stop-learning-frameworks.html" rel="alternate" type="text/html" title="请停止学习框架 - Stop Learning Frameworks" /><published>2019-05-14T00:00:00+08:00</published><updated>2019-05-14T00:00:00+08:00</updated><id>http://www.thxopen.com/life/2019/05/14/stop-learning-frameworks</id><content type="html" xml:base="http://www.thxopen.com/life/2019/05/14/stop-learning-frameworks.html">&lt;p&gt;最近阅读到一篇文章，原文标题&lt;a href=&quot;https://sizovs.net/2018/12/17/stop-learning-frameworks/&quot;&gt;《Stop Learning Frameworks》&lt;/a&gt;，
读完之后感触很深，很赞同作者的观点，这里分享这篇文章，同时练习一下英语翻译，学习一些专业上的英语词汇和表达。下面是译文：&lt;/p&gt;

&lt;h2 id=&quot;请停止学习框架&quot;&gt;请停止学习框架&lt;/h2&gt;

&lt;p&gt;我们是开发者。我们需要与最新的技术保持同步。每天，我们学习编程语言，框架和第三方库。知道越前沿的技术越好。&lt;/p&gt;

&lt;p&gt;与Angular, React, Vue, Riot, Ember, Knockout这些技术保持同步是很有趣的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;但是我们在浪费时间.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;时间是我们最宝贵的财富。是有限的，不能再生，而且你不能买到更多。&lt;/p&gt;

&lt;p&gt;技术，比如时尚，它像光速一样在变化。为了抓住这些，我们必须奔跑。这场比赛没有赢家，因为比赛没有终点。&lt;/p&gt;

&lt;p&gt;我的导师有一次给我上了一堂课：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;导师：“Ed，你在干什么？”&lt;/li&gt;
    &lt;li&gt;我（带着一种骄傲）：“我在读一本书，关于使用GWT构建现代java应用程序。”&lt;/li&gt;
    &lt;li&gt;导师：“为了什么？”&lt;/li&gt;
    &lt;li&gt;我：“作为一个java开发，我需要跟上潮流，而GWT就是潮流。”&lt;/li&gt;
    &lt;li&gt;导师：“在GWT之前你读过什么技术的书籍么？”&lt;/li&gt;
    &lt;li&gt;我：“是一本长达500页的 Apache Tapestry 书，Tapestry 之前是潮流”&lt;/li&gt;
    &lt;li&gt;导师：“Tapestry 现在任然是潮流么？”&lt;/li&gt;
    &lt;li&gt;我：“不再是，GWT现在是潮流”&lt;/li&gt;
    &lt;li&gt;导师：“你能重新使用 Tapestry 技能解决现在的问题么？ ”&lt;/li&gt;
    &lt;li&gt;我：“不行，目前没有人使用它。 ”&lt;/li&gt;
    &lt;li&gt;导师：“Tapestry 知识能帮你更好的理解 GWT么？ ”&lt;/li&gt;
    &lt;li&gt;我：“ 不，它不行。但是我看到了一些重叠的模式。 ”&lt;/li&gt;
    &lt;li&gt;导师：“ 那个是设计模式，它能帮你解决现在的问题么？ ”&lt;/li&gt;
    &lt;li&gt;我：“ 是的，大多数都可以 ”&lt;/li&gt;
    &lt;li&gt;导师：“ 新的技术层出不穷，消失也是常有的。但是他们有一些共同点。设置正确的优先级 ，投资80%的时间在学习基础知识上面，剩余的20%学习，库和工具。”&lt;/li&gt;
    &lt;li&gt;我：“ 额。。 只花20%的时间学习框架，库和工具？”&lt;/li&gt;
    &lt;li&gt;导师：“是的，反正你在工作中解决问题的时候会学习到”&lt;/li&gt;
    &lt;li&gt;我：“ 谢谢 ”&lt;/li&gt;
    &lt;li&gt;导师：“ 稍后再感谢 ”&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个建议改变了我的生活。我丢掉了书柜上所有框架的书，罪恶感从50减到0，终于解脱了！&lt;/p&gt;

&lt;p&gt;然后我买了一些经久不衰的书籍。这些书占据了我80%的学习时间：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Pragmatic Programmer 程序员修炼之道: 从小工到专家&lt;/li&gt;
  &lt;li&gt;Clean Code  代码整洁之道&lt;/li&gt;
  &lt;li&gt;The Clean Coder 程序员的职业素养&lt;/li&gt;
  &lt;li&gt;Domain-Driven Design 领域驱动设计&lt;/li&gt;
  &lt;li&gt;Growing Object-Oriented Software, Guided by Tests 测试驱动的面向对象软件开发&lt;/li&gt;
  &lt;li&gt;Continuous Delivery 持续交付&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://sizovs.net/2019/03/17/the-best-books-all-software-developers-must-read/&quot;&gt;查看所有的书籍列表&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我还买了一本当前技术的书籍。根据“林迪效应”，spring框架必须是一个好的投资：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;技术预期寿命和它们目前已经存在的时间成正比。每多生存一段时间，它的剩余预期寿命就会增加一点&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;技术在市场上存活的时间越长，投资就越安全。&lt;/p&gt;

&lt;p&gt;不要急于学习新的技术，它很有可能会死。&lt;/p&gt;

&lt;p&gt;时间将会展示那些技术值得投资。时间是您最好的顾问。你要学会等待。&lt;/p&gt;

&lt;p&gt;从那以后的十年，我帮助了50个不同的软件项目。感谢导师的建议，我学到的一切都可以在公司，团队和行业适用。我学习的知识今天任然有用。
&lt;strong&gt;我没有浪费我的时间&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;所有的项目看起来都不一样，但如果你看一下项目的内部：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;编程语言不一样，但设计是一样的&lt;/li&gt;
  &lt;li&gt;框架不一样，从始至终就那些设计模式&lt;/li&gt;
  &lt;li&gt;开发人员不一样，但与人交往是的规则是一样的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;请记住，框架，库和工具这些层出不穷，消失也是常有的。时间是宝贵的。&lt;/p&gt;

&lt;p&gt;把你的黄金时间投入到可移植的总是相关的技能上面。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;del&gt;微服务&lt;/del&gt;  演进式架构&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;新的语言&lt;/del&gt;  代码整洁之道，设计模式，领域驱动设计&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;LeSS, SAFe&lt;/del&gt;  精益制造原则&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Hystrix&lt;/del&gt;  容错模式&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Docker&lt;/del&gt;  持续交付&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Angular&lt;/del&gt;  WEB，HTTP 和 REST&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;之所以对这个感触很深，我觉得我就陷入了这个死循环中。大数据热门，我就买了很多关于大数据的书籍，Hadoop，Hive，spark，Hbase等等。
厚厚的几本书放在那儿吃灰，至今没有翻阅，即便是看了也只是学会了几个工具的使用，对于真正的MapReduce，HDFS这些基础的又理解了多少呢？为什么这些简单的道理自己不能误出来呢？&lt;/p&gt;

&lt;p&gt;万变不离其宗，所以只有基础扎实，工作中解决问题才能游刃有余。&lt;/p&gt;

&lt;p&gt;人与人之间交往好，和家人、朋友、同事都能相处好。&lt;/p&gt;</content><author><name>单思义</name><email>keith@thxopen.com</email></author><category term="翻译" /><category term="好文" /><summary type="html">最近阅读到一篇文章，原文标题《Stop Learning Frameworks》， 读完之后感触很深，很赞同作者的观点，这里分享这篇文章，同时练习一下英语翻译，学习一些专业上的英语词汇和表达。下面是译文： 请停止学习框架 我们是开发者。我们需要与最新的技术保持同步。每天，我们学习编程语言，框架和第三方库。知道越前沿的技术越好。 与Angular, React, Vue, Riot, Ember, Knockout这些技术保持同步是很有趣的。 但是我们在浪费时间. 时间是我们最宝贵的财富。是有限的，不能再生，而且你不能买到更多。 技术，比如时尚，它像光速一样在变化。为了抓住这些，我们必须奔跑。这场比赛没有赢家，因为比赛没有终点。 我的导师有一次给我上了一堂课： 导师：“Ed，你在干什么？” 我（带着一种骄傲）：“我在读一本书，关于使用GWT构建现代java应用程序。” 导师：“为了什么？” 我：“作为一个java开发，我需要跟上潮流，而GWT就是潮流。” 导师：“在GWT之前你读过什么技术的书籍么？” 我：“是一本长达500页的 Apache Tapestry 书，Tapestry 之前是潮流” 导师：“Tapestry 现在任然是潮流么？” 我：“不再是，GWT现在是潮流” 导师：“你能重新使用 Tapestry 技能解决现在的问题么？ ” 我：“不行，目前没有人使用它。 ” 导师：“Tapestry 知识能帮你更好的理解 GWT么？ ” 我：“ 不，它不行。但是我看到了一些重叠的模式。 ” 导师：“ 那个是设计模式，它能帮你解决现在的问题么？ ” 我：“ 是的，大多数都可以 ” 导师：“ 新的技术层出不穷，消失也是常有的。但是他们有一些共同点。设置正确的优先级 ，投资80%的时间在学习基础知识上面，剩余的20%学习，库和工具。” 我：“ 额。。 只花20%的时间学习框架，库和工具？” 导师：“是的，反正你在工作中解决问题的时候会学习到” 我：“ 谢谢 ” 导师：“ 稍后再感谢 ” 这个建议改变了我的生活。我丢掉了书柜上所有框架的书，罪恶感从50减到0，终于解脱了！ 然后我买了一些经久不衰的书籍。这些书占据了我80%的学习时间： The Pragmatic Programmer 程序员修炼之道: 从小工到专家 Clean Code 代码整洁之道 The Clean Coder 程序员的职业素养 Domain-Driven Design 领域驱动设计 Growing Object-Oriented Software, Guided by Tests 测试驱动的面向对象软件开发 Continuous Delivery 持续交付 查看所有的书籍列表 我还买了一本当前技术的书籍。根据“林迪效应”，spring框架必须是一个好的投资： 技术预期寿命和它们目前已经存在的时间成正比。每多生存一段时间，它的剩余预期寿命就会增加一点 技术在市场上存活的时间越长，投资就越安全。 不要急于学习新的技术，它很有可能会死。 时间将会展示那些技术值得投资。时间是您最好的顾问。你要学会等待。 从那以后的十年，我帮助了50个不同的软件项目。感谢导师的建议，我学到的一切都可以在公司，团队和行业适用。我学习的知识今天任然有用。 我没有浪费我的时间。 所有的项目看起来都不一样，但如果你看一下项目的内部： 编程语言不一样，但设计是一样的 框架不一样，从始至终就那些设计模式 开发人员不一样，但与人交往是的规则是一样的 请记住，框架，库和工具这些层出不穷，消失也是常有的。时间是宝贵的。 把你的黄金时间投入到可移植的总是相关的技能上面。 微服务 演进式架构 新的语言 代码整洁之道，设计模式，领域驱动设计 LeSS, SAFe 精益制造原则 Hystrix 容错模式 Docker 持续交付 Angular WEB，HTTP 和 REST 之所以对这个感触很深，我觉得我就陷入了这个死循环中。大数据热门，我就买了很多关于大数据的书籍，Hadoop，Hive，spark，Hbase等等。 厚厚的几本书放在那儿吃灰，至今没有翻阅，即便是看了也只是学会了几个工具的使用，对于真正的MapReduce，HDFS这些基础的又理解了多少呢？为什么这些简单的道理自己不能误出来呢？ 万变不离其宗，所以只有基础扎实，工作中解决问题才能游刃有余。 人与人之间交往好，和家人、朋友、同事都能相处好。</summary></entry><entry><title type="html">在linux下从jar中替换、修改文件</title><link href="http://www.thxopen.com/linux/2019/05/07/how-to-modify-or-replace-file-from-jar-on-linux.html" rel="alternate" type="text/html" title="在linux下从jar中替换、修改文件" /><published>2019-05-07T00:00:00+08:00</published><updated>2019-05-07T00:00:00+08:00</updated><id>http://www.thxopen.com/linux/2019/05/07/how-to-modify-or-replace-file-from-jar-on-linux</id><content type="html" xml:base="http://www.thxopen.com/linux/2019/05/07/how-to-modify-or-replace-file-from-jar-on-linux.html">&lt;h2 id=&quot;修改文件内容&quot;&gt;修改文件内容&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vi&lt;/code&gt;命令在linux下再熟悉不过了，搭配&lt;code class=&quot;highlighter-rouge&quot;&gt;unzip&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt;还可以修改压缩包里的文件。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ps: 如果本机还没有安装&lt;code class=&quot;highlighter-rouge&quot;&gt;zip,unzip&lt;/code&gt;，先执行安装命令&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;sudo apt-get install unzip&lt;/li&gt;
    &lt;li&gt;sudo apt-get install zip&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;假设现在有如下结构的目录:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HelloWorld/
└── src
    └── main
        ├── META-INF
        │   └── MANIFEST.MF
        ├── java
        │   └── com
        │       └── thxopen
        │           └── demo
        │               └── Main.java
        └── resources
            └── demo.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Main.java 文件内容如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thxopen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * @author Keith Shan
 * @date 2019年5月7日
 * @site http://www.thxopen.com
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceAsStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;demo.txt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BufferedInputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;available&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;bf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;代码很简单，输出一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World!&lt;/code&gt; 然后读取&lt;code class=&quot;highlighter-rouge&quot;&gt;resources/demo.txt&lt;/code&gt;文件内容并输出。&lt;/p&gt;

&lt;p&gt;我们把项目构建成jar上传到服务器，并在服务器上执行。下面是执行输出的结果&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;thxopen@PC201503302026:~/work&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; HelloWorld.jar
Hello World!
I am Keith Shan.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在需要修改demo.txt的内容，改变输出，不需要重新打包上传，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;vi&lt;/code&gt;命令即可&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;thxopen@PC201503302026:~/work&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi HelloWorld.jar

&lt;span class=&quot;s2&quot;&gt;&quot; zip.vim version v28
&quot;&lt;/span&gt; Browsing zipfile /home/thxopen/work/HelloWorld.jar
&lt;span class=&quot;s2&quot;&gt;&quot; Select a file with cursor and press ENTER

META-INF/MANIFEST.MF
com/
com/thxopen/
com/thxopen/demo/
com/thxopen/demo/Main.class
demo.txt
META-INF/
META-INF/HelloWorld.kotlin_module
                               
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后会列出jar里面的内容，把光标移动到需要编辑的文件，回车即可编辑。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ps: 如果文件比较多，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;/filename&lt;/code&gt; 来查找定位&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;进入文件编辑状态后，操作就和&lt;code class=&quot;highlighter-rouge&quot;&gt;vi&lt;/code&gt;命令一样，这里我新增&lt;code class=&quot;highlighter-rouge&quot;&gt;I am the new String.&lt;/code&gt; 内容，&lt;code class=&quot;highlighter-rouge&quot;&gt;:wq!&lt;/code&gt;保存退出vi，然后&lt;code class=&quot;highlighter-rouge&quot;&gt;:exit&lt;/code&gt;退出jar编辑状态。
重新执行&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;thxopen@PC201503302026:~/work&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; HelloWorld.jar
Hello World!
I am Keith Shan.
I am the new String.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;从输出可以看到&lt;code class=&quot;highlighter-rouge&quot;&gt;demo.txt&lt;/code&gt;内容被成功修改&lt;/p&gt;

&lt;h2 id=&quot;替换文件&quot;&gt;替换文件&lt;/h2&gt;

&lt;p&gt;修改文件内容对于.class文件来说似乎就不行了，那只能直接替换文件，如果替换文件呢？&lt;/p&gt;

&lt;p&gt;我修改Main.java文件，修改后内容如下：&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thxopen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
 * @author Keith Shan
 * @date 2019年5月7日
 * @site http://www.thxopen.com
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Class file modified&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;我把编译好的class文件放到 &lt;code class=&quot;highlighter-rouge&quot;&gt;/com/thxopen/demo&lt;/code&gt;目录下，如下所示&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;thxopen@PC201503302026:~/work&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tree
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── HelloWorld.jar
└── com
    └── thxopen
        └── demo
            └── Main.class &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;重新编译好的文件&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

3 directories, 2 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;执行如下命令把文件替换到jar中&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;thxopen@PC201503302026:~/work&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jar &lt;span class=&quot;nt&quot;&gt;-uvf&lt;/span&gt; HelloWorld.jar com/thxopen/demo/Main.class
adding: com/thxopen/demo/Main.class&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 557&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 351&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;deflated 36%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重新执行，class文件已经被替换&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;thxopen@PC201503302026:~/work&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; HelloWorld.jar
Class file modified
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;附：jar命令的基本用法&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;thxopen@PC201503302026:~/work&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jar
Usage: jar &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ctxui&lt;span class=&quot;o&quot;&gt;}[&lt;/span&gt;vfmn0PMe] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;jar-file] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;manifest-file] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;entry-point] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; files ...
Options:
    &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;  create new archive
    &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt;  list table of contents &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;archive
    &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;  extract named &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;or all&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; files from archive
    &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;  update existing archive 更新存在的压缩包
    &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;  generate verbose output on standard output 生成日志到标准输出
    &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;  specify archive file name 指定压缩包名称
    &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt;  include manifest information from specified manifest file
    &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt;  perform Pack200 normalization after creating a new archive
    &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;  specify application entry point &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;stand-alone application
        bundled into an executable jar file
    &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt;  store only&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; use no ZIP compression
    &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt;  preserve leading &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;absolute path&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; and &lt;span class=&quot;s2&quot;&gt;&quot;..&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;parent directory&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; components from file names
    &lt;span class=&quot;nt&quot;&gt;-M&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not create a manifest file &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the entries
    &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;  generate index information &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the specified jar files
    &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt;  change to the specified directory and include the following file
If any file is a directory &lt;span class=&quot;k&quot;&gt;then &lt;/span&gt;it is processed recursively.
The manifest file name, the archive file name and the entry point name are
specified &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the same order as the &lt;span class=&quot;s1&quot;&gt;'m'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'f'&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;'e'&lt;/span&gt; flags.

Example 1: to archive two class files into an archive called classes.jar:
       jar cvf classes.jar Foo.class Bar.class
Example 2: use an existing manifest file &lt;span class=&quot;s1&quot;&gt;'mymanifest'&lt;/span&gt; and archive all the
           files &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the foo/ directory into &lt;span class=&quot;s1&quot;&gt;'classes.jar'&lt;/span&gt;:
       jar cvfm classes.jar mymanifest &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; foo/ &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>单思义</name><email>keith@thxopen.com</email></author><category term="jar" /><category term="linux" /><category term="vi" /><category term="zip" /><category term="unzip" /><summary type="html">修改文件内容 vi命令在linux下再熟悉不过了，搭配unzip和zip还可以修改压缩包里的文件。 ps: 如果本机还没有安装zip,unzip，先执行安装命令 sudo apt-get install unzip sudo apt-get install zip 假设现在有如下结构的目录: HelloWorld/ └── src └── main ├── META-INF │   └── MANIFEST.MF ├── java │   └── com │   └── thxopen │   └── demo │   └── Main.java └── resources └── demo.txt Main.java 文件内容如下： package com.thxopen.demo; import java.io.BufferedInputStream; import java.io.IOException; import java.io.InputStream; /** * @author Keith Shan * @date 2019年5月7日 * @site http://www.thxopen.com */ public class Main { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); InputStream uri = Main.class.getClassLoader().getResourceAsStream(&quot;demo.txt&quot;); BufferedInputStream bf = null; try { bf = new BufferedInputStream(uri); byte[] b = new byte[bf.available()]; bf.read(b); System.out.println(new String(b)); } catch (IOException e) { e.printStackTrace(); } finally { if (bf != null) { try { bf.close(); } catch (IOException e) { e.printStackTrace(); } } } } } 代码很简单，输出一个Hello World! 然后读取resources/demo.txt文件内容并输出。 我们把项目构建成jar上传到服务器，并在服务器上执行。下面是执行输出的结果 thxopen@PC201503302026:~/work$ java -jar HelloWorld.jar Hello World! I am Keith Shan. 现在需要修改demo.txt的内容，改变输出，不需要重新打包上传，使用vi命令即可 thxopen@PC201503302026:~/work$ vi HelloWorld.jar &quot; zip.vim version v28 &quot; Browsing zipfile /home/thxopen/work/HelloWorld.jar &quot; Select a file with cursor and press ENTER META-INF/MANIFEST.MF com/ com/thxopen/ com/thxopen/demo/ com/thxopen/demo/Main.class demo.txt META-INF/ META-INF/HelloWorld.kotlin_module 然后会列出jar里面的内容，把光标移动到需要编辑的文件，回车即可编辑。 ps: 如果文件比较多，可以使用/filename 来查找定位 进入文件编辑状态后，操作就和vi命令一样，这里我新增I am the new String. 内容，:wq!保存退出vi，然后:exit退出jar编辑状态。 重新执行 thxopen@PC201503302026:~/work$ java -jar HelloWorld.jar Hello World! I am Keith Shan. I am the new String. 从输出可以看到demo.txt内容被成功修改 替换文件 修改文件内容对于.class文件来说似乎就不行了，那只能直接替换文件，如果替换文件呢？ 我修改Main.java文件，修改后内容如下： package com.thxopen.demo; /** * @author Keith Shan * @date 2019年5月7日 * @site http://www.thxopen.com */ public class Main { public static void main(String[] args) { System.out.println(&quot;Class file modified&quot;); } } 我把编译好的class文件放到 /com/thxopen/demo目录下，如下所示 thxopen@PC201503302026:~/work$ tree . ├── HelloWorld.jar └── com └── thxopen └── demo └── Main.class (重新编译好的文件) 3 directories, 2 files 执行如下命令把文件替换到jar中 thxopen@PC201503302026:~/work$ jar -uvf HelloWorld.jar com/thxopen/demo/Main.class adding: com/thxopen/demo/Main.class(in = 557) (out= 351)(deflated 36%) 重新执行，class文件已经被替换 thxopen@PC201503302026:~/work$ java -jar HelloWorld.jar Class file modified 附：jar命令的基本用法 thxopen@PC201503302026:~/work$ jar Usage: jar {ctxui}[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] files ... Options: -c create new archive -t list table of contents for archive -x extract named (or all) files from archive -u update existing archive 更新存在的压缩包 -v generate verbose output on standard output 生成日志到标准输出 -f specify archive file name 指定压缩包名称 -m include manifest information from specified manifest file -n perform Pack200 normalization after creating a new archive -e specify application entry point for stand-alone application bundled into an executable jar file -0 store only; use no ZIP compression -P preserve leading '/' (absolute path) and &quot;..&quot; (parent directory) components from file names -M do not create a manifest file for the entries -i generate index information for the specified jar files -C change to the specified directory and include the following file If any file is a directory then it is processed recursively. The manifest file name, the archive file name and the entry point name are specified in the same order as the 'm', 'f' and 'e' flags. Example 1: to archive two class files into an archive called classes.jar: jar cvf classes.jar Foo.class Bar.class Example 2: use an existing manifest file 'mymanifest' and archive all the files in the foo/ directory into 'classes.jar': jar cvfm classes.jar mymanifest -C foo/ .</summary></entry><entry><title type="html">使用DataTables”武装”你的html表格——开刊</title><link href="http://www.thxopen.com/datatables/2019/05/02/how-to-make-your-table-stronger.html" rel="alternate" type="text/html" title="使用DataTables&quot;武装&quot;你的html表格——开刊" /><published>2019-05-02T00:00:00+08:00</published><updated>2019-05-02T00:00:00+08:00</updated><id>http://www.thxopen.com/datatables/2019/05/02/how-to-make-your-table-stronger</id><content type="html" xml:base="http://www.thxopen.com/datatables/2019/05/02/how-to-make-your-table-stronger.html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;三年前，&lt;a href=&quot;http://datatables.club/blog/2016/06/04/to-reader.html&quot;&gt;《致在使用DataTables的小伙伴》&lt;/a&gt;，看到努力的自己，我想感谢我自己。
谢谢你，谢谢一直努力的你！&lt;/p&gt;

&lt;p&gt;我还想说，我很幸运，我选择了Datatables。我也很感谢那些正在使用以及即将要使用Datatables的小伙伴，因为没有你们，就没有现在的
DataTables中文网，没有你们，Datatables中文网也走不到今天。每当看到你们从中文网上获取到答案或者思路，我都感到无比的开心。我永远都忘不了
当我使用Datatables服务器模式遇到问题解决不了的时候，有一个人帮我解决，然后我豁然开朗的感觉，我想大家每当问题得到解决的时候那种心情是多么的……&lt;/p&gt;

&lt;p&gt;但我也要批评我自己，批评自己不够坚持，没有做到有始有终，以为这样就足够了，这是对大家不负责也是对自己不负责。从2014年到2019年，Datatables中文网
一直属于半成品状态。我高兴，因为上面的内容能够帮助大家，但我又悲伤，因为内容不够完整，不是所有人都能在上面得到答案。有的人说好，有的人说不好，
以前我会在意这些看法，但是现在不会了，人无完人，也没有完美的东西。任何事情都是在一次次修正中，逐渐趋于完美。不管怎么样我还是坚持过来了，没有放弃，
那么在接下来的时间里，不仅仅只是坚持，还要把它做得更好。&lt;/p&gt;

&lt;p&gt;现在越来越多的IT在线教育平台，讲各种各样的知识，技术，框架等等。我也经常会去上面学习，通过看视频，对自己的知识查漏补缺，还可以系统的梳理知识。
而且对于一些质量好的视频看过之后有种醍醐灌顶，豁然开朗的感觉，如果看一次不懂还可以看第二次，三次，直到明白为止。正因为如此，我有了做视频的念头，
如果我也能把我总结的经验说出来教给别人，把知识分享给更多人，岂不也是一件快乐的事情。&lt;/p&gt;

&lt;p&gt;所以，我做了。&lt;/p&gt;

&lt;h2 id=&quot;课程目的&quot;&gt;课程目的&lt;/h2&gt;

&lt;p&gt;本次推出Datatables入门第二期 ——《使用Datatables”武装”你的html表格》，旨在给出一个系统的学习路径，解决如下问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不知道怎么学习Datatables&lt;/li&gt;
  &lt;li&gt;新老版本混用，不规范和不标准，阅读代码困难&lt;/li&gt;
  &lt;li&gt;滥用Datatables，小小需求就用插件导致项目臃肿&lt;/li&gt;
  &lt;li&gt;不知道怎么把Datatables的强大功能套用到自己的项目中&lt;/li&gt;
  &lt;li&gt;客户端模式和服务器模式什么区别，怎么使用&lt;/li&gt;
  &lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;课程内容&quot;&gt;课程内容&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;开刊（即本节内容，已完成 2019年05月02日）&lt;/li&gt;
  &lt;li&gt;第一章，Datatables的6大特性(已完成 2019年06月09日)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;/datatables/2019/06/09/datatables-dom-option.html&quot;&gt;DOM属性的介绍&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第二章，对于各种数据源该怎么使用Datatables？
    &lt;ul&gt;
      &lt;li&gt;Dom数据源&lt;/li&gt;
      &lt;li&gt;javascript数据&lt;/li&gt;
      &lt;li&gt;Ajax数据&lt;/li&gt;
      &lt;li&gt;服务器模式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第三章，打造和自己项目贴近的表格
    &lt;ul&gt;
      &lt;li&gt;info，paging，processing，lengthChange，searching&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第四章，更方便的操作表格数据
    &lt;ul&gt;
      &lt;li&gt;ajax&lt;/li&gt;
      &lt;li&gt;columns&lt;/li&gt;
      &lt;li&gt;row&lt;/li&gt;
      &lt;li&gt;draw&lt;/li&gt;
      &lt;li&gt;page&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;实战——制作一个具有增删改查功能的表格
    &lt;ul&gt;
      &lt;li&gt;行内编辑&lt;/li&gt;
      &lt;li&gt;弹框编辑&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;内容会有变动，只有视频录好后就定下内容，本目录会不断更新直到全部完结&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;课程视频&quot;&gt;课程视频&lt;/h2&gt;

&lt;p&gt;由于服务器不支持视频播放，鼠标右键&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;/video/season_two/season2-01.mp4&quot;&gt;点我&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;，另存为到本地即可&lt;/p&gt;

&lt;p&gt;最后，谢谢大家的支持，如有错误的地方还望指出，如果您还有其他的建议或要求，欢迎在下方留言&lt;/p&gt;</content><author><name>单思义</name><email>keith@thxopen.com</email></author><category term="datatables" /><category term="视频" /><category term="入门第二期" /><summary type="html">前言 三年前，《致在使用DataTables的小伙伴》，看到努力的自己，我想感谢我自己。 谢谢你，谢谢一直努力的你！ 我还想说，我很幸运，我选择了Datatables。我也很感谢那些正在使用以及即将要使用Datatables的小伙伴，因为没有你们，就没有现在的 DataTables中文网，没有你们，Datatables中文网也走不到今天。每当看到你们从中文网上获取到答案或者思路，我都感到无比的开心。我永远都忘不了 当我使用Datatables服务器模式遇到问题解决不了的时候，有一个人帮我解决，然后我豁然开朗的感觉，我想大家每当问题得到解决的时候那种心情是多么的…… 但我也要批评我自己，批评自己不够坚持，没有做到有始有终，以为这样就足够了，这是对大家不负责也是对自己不负责。从2014年到2019年，Datatables中文网 一直属于半成品状态。我高兴，因为上面的内容能够帮助大家，但我又悲伤，因为内容不够完整，不是所有人都能在上面得到答案。有的人说好，有的人说不好， 以前我会在意这些看法，但是现在不会了，人无完人，也没有完美的东西。任何事情都是在一次次修正中，逐渐趋于完美。不管怎么样我还是坚持过来了，没有放弃， 那么在接下来的时间里，不仅仅只是坚持，还要把它做得更好。 现在越来越多的IT在线教育平台，讲各种各样的知识，技术，框架等等。我也经常会去上面学习，通过看视频，对自己的知识查漏补缺，还可以系统的梳理知识。 而且对于一些质量好的视频看过之后有种醍醐灌顶，豁然开朗的感觉，如果看一次不懂还可以看第二次，三次，直到明白为止。正因为如此，我有了做视频的念头， 如果我也能把我总结的经验说出来教给别人，把知识分享给更多人，岂不也是一件快乐的事情。 所以，我做了。 课程目的 本次推出Datatables入门第二期 ——《使用Datatables”武装”你的html表格》，旨在给出一个系统的学习路径，解决如下问题： 不知道怎么学习Datatables 新老版本混用，不规范和不标准，阅读代码困难 滥用Datatables，小小需求就用插件导致项目臃肿 不知道怎么把Datatables的强大功能套用到自己的项目中 客户端模式和服务器模式什么区别，怎么使用 等等 课程内容 开刊（即本节内容，已完成 2019年05月02日） 第一章，Datatables的6大特性(已完成 2019年06月09日) DOM属性的介绍 第二章，对于各种数据源该怎么使用Datatables？ Dom数据源 javascript数据 Ajax数据 服务器模式 第三章，打造和自己项目贴近的表格 info，paging，processing，lengthChange，searching 第四章，更方便的操作表格数据 ajax columns row draw page 实战——制作一个具有增删改查功能的表格 行内编辑 弹框编辑 内容会有变动，只有视频录好后就定下内容，本目录会不断更新直到全部完结 课程视频 由于服务器不支持视频播放，鼠标右键点我，另存为到本地即可 最后，谢谢大家的支持，如有错误的地方还望指出，如果您还有其他的建议或要求，欢迎在下方留言</summary></entry><entry><title type="html">Caused by: java.lang.ClassNotFoundException: springfox.documentation.service.ApiInfo</title><link href="http://www.thxopen.com/java/exception/2019/04/28/apiinfo-class-not-found.html" rel="alternate" type="text/html" title="Caused by: java.lang.ClassNotFoundException: springfox.documentation.service.ApiInfo" /><published>2019-04-28T00:00:00+08:00</published><updated>2019-04-28T00:00:00+08:00</updated><id>http://www.thxopen.com/java/exception/2019/04/28/apiinfo-class-not-found</id><content type="html" xml:base="http://www.thxopen.com/java/exception/2019/04/28/apiinfo-class-not-found.html">&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;

&lt;p&gt;项目中需要使用swagger提供api文档，于是加上依赖：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.springfox&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;springfox-swagger2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.2.2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.springfox&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;springfox-swagger-ui&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.2.2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置swagger扫描的路径：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;springfox.documentation.builders.ApiInfoBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;springfox.documentation.builders.ParameterBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;springfox.documentation.builders.PathSelectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;springfox.documentation.builders.RequestHandlerSelectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;springfox.documentation.schema.ModelRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;springfox.documentation.service.ApiInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;springfox.documentation.service.Parameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;springfox.documentation.spi.DocumentationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;springfox.documentation.spring.web.plugins.Docket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;springfox.documentation.swagger2.annotations.EnableSwagger2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * swagger配置
 * &amp;lt;p&amp;gt;
 * 2019年4月28日
 *
 * @author Keith
 * @version v0.0.1
 */&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//开启swagger&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableSwagger2&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Swagger2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//在配置文件里设置扫描controller的路径&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${swagger.basePackage}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basePackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Docket&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createRestApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ParameterBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ticketPar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParameterBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ticketPar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;modelRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parameterType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//header中的ticket参数非必填，传空也可以&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ticketPar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//根据每个方法名也知道当前方法在设置什么参数&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Docket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DocumentationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SWAGGER_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apiInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apiInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestHandlerSelectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;basePackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basePackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PathSelectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//                .globalOperationParameters(pars)  ;  //所有接口请求需要带上的参数&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiInfo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apiInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApiInfoBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;接口名称)
                .description(&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;接口描述&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;)
                .termsOfServiceUrl(&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;服务&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;)
                .contact(&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;联系人&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;)
                .version(&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;版本号&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;以上配置在另一个项目中是没问题的，我拷贝过来到新的项目上，启动tomcat，结果报如下错误：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Caused by: java.lang.ClassNotFoundException: springfox.documentation.service.ApiInfo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;疑问&quot;&gt;疑问&lt;/h2&gt;

&lt;p&gt;intellij idea编译能通过，但是启动tomcat的时候却报类找不到，为什么呢？&lt;/p&gt;

&lt;h2 id=&quot;解决问题&quot;&gt;解决问题&lt;/h2&gt;

&lt;p&gt;我使用的是intellij idea开发，我查看了编译好的war目录，虽然我maven已经引用了依赖，构建也没有问题，但我发现&lt;code class=&quot;highlighter-rouge&quot;&gt;/WEB_INFO/lib&lt;/code&gt;
确实没有swagger的相关jar。&lt;/p&gt;

&lt;p&gt;我把问题锁定到Artifacts配置上，我打开Project Structure -》 Project Settings -》Artifacts 发现Available Elements里面
Swagger相关的jar没有打包war中，所以tomcat启动会提示类找不到。于是选中swagger相关jar，右键&lt;code class=&quot;highlighter-rouge&quot;&gt;put into /WEB_INFO/lib&lt;/code&gt;，
再次启动tomcat，问题得到解决。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/java/artifacts.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;intellij idea在修改pom.xml后，没有自动把相关的jar构建到war中，导致发布到tomcat里的war缺失相关jar。手动把缺失的jar构建到war中
即可解决问题。&lt;/p&gt;</content><author><name>单思义</name><email>keith@thxopen.com</email></author><category term="ClassNotFoundException" /><category term="java" /><category term="swagger" /><category term="intellij idea" /><summary type="html">起因 项目中需要使用swagger提供api文档，于是加上依赖： &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;springfox-swagger2&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;springfox-swagger-ui&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 配置swagger扫描的路径： import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import springfox.documentation.builders.ApiInfoBuilder; import springfox.documentation.builders.ParameterBuilder; import springfox.documentation.builders.PathSelectors; import springfox.documentation.builders.RequestHandlerSelectors; import springfox.documentation.schema.ModelRef; import springfox.documentation.service.ApiInfo; import springfox.documentation.service.Parameter; import springfox.documentation.spi.DocumentationType; import springfox.documentation.spring.web.plugins.Docket; import springfox.documentation.swagger2.annotations.EnableSwagger2; import java.util.ArrayList; import java.util.List; /** * swagger配置 * &amp;lt;p&amp;gt; * 2019年4月28日 * * @author Keith * @version v0.0.1 */ @Configuration //开启swagger @EnableSwagger2 public class Swagger2 { //在配置文件里设置扫描controller的路径 @Value(&quot;${swagger.basePackage}&quot;) String basePackage; @Bean public Docket createRestApi() { ParameterBuilder ticketPar = new ParameterBuilder(); List&amp;lt;Parameter&amp;gt; pars = new ArrayList&amp;lt;Parameter&amp;gt;(); ticketPar.name(&quot;Authorization&quot;).description(&quot;token&quot;) .modelRef(new ModelRef(&quot;string&quot;)).parameterType(&quot;header&quot;) .required(true).build(); //header中的ticket参数非必填，传空也可以 pars.add(ticketPar.build()); //根据每个方法名也知道当前方法在设置什么参数 return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .select() .apis(RequestHandlerSelectors.basePackage(basePackage)) .paths(PathSelectors.any()) .build(); // .globalOperationParameters(pars) ; //所有接口请求需要带上的参数 } private ApiInfo apiInfo() { return new ApiInfoBuilder() .title(&quot;接口名称) .description(&quot;接口描述&quot;) .termsOfServiceUrl(&quot;服务url&quot;) .contact(&quot;联系人&quot;) .version(&quot;版本号&quot;) .build(); } } 以上配置在另一个项目中是没问题的，我拷贝过来到新的项目上，启动tomcat，结果报如下错误： Caused by: java.lang.ClassNotFoundException: springfox.documentation.service.ApiInfo 疑问 intellij idea编译能通过，但是启动tomcat的时候却报类找不到，为什么呢？ 解决问题 我使用的是intellij idea开发，我查看了编译好的war目录，虽然我maven已经引用了依赖，构建也没有问题，但我发现/WEB_INFO/lib 确实没有swagger的相关jar。 我把问题锁定到Artifacts配置上，我打开Project Structure -》 Project Settings -》Artifacts 发现Available Elements里面 Swagger相关的jar没有打包war中，所以tomcat启动会提示类找不到。于是选中swagger相关jar，右键put into /WEB_INFO/lib， 再次启动tomcat，问题得到解决。 总结 intellij idea在修改pom.xml后，没有自动把相关的jar构建到war中，导致发布到tomcat里的war缺失相关jar。手动把缺失的jar构建到war中 即可解决问题。</summary></entry><entry><title type="html">使用Docker安装oracle 11g</title><link href="http://www.thxopen.com/linux/docker/2019/04/17/install-oracle11g-on-docker.html" rel="alternate" type="text/html" title="使用Docker安装oracle 11g" /><published>2019-04-17T00:00:00+08:00</published><updated>2019-04-17T00:00:00+08:00</updated><id>http://www.thxopen.com/linux/docker/2019/04/17/install-oracle11g-on-docker</id><content type="html" xml:base="http://www.thxopen.com/linux/docker/2019/04/17/install-oracle11g-on-docker.html">&lt;h2 id=&quot;一简介&quot;&gt;一，简介&lt;/h2&gt;

&lt;p&gt;Oracle Database，又名Oracle RDBMS，或简称Oracle。是甲骨文公司的一款关系数据库管理系统。&lt;/p&gt;

&lt;p&gt;借助docker，安装oracle不再困难，只需要几步即可。&lt;/p&gt;

&lt;p&gt;需要注意，在参考本文章之前，需要具备操作docker的基础，怎么使用docker，可以参考&lt;a href=&quot;&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;二安装&quot;&gt;二，安装&lt;/h2&gt;

&lt;h3 id=&quot;21安装oracle-11g镜像到docker&quot;&gt;2.1、安装oracle 11g镜像到docker&lt;/h3&gt;

&lt;h4 id=&quot;211搜索符合条件的镜像&quot;&gt;2.1.1、搜索符合条件的镜像&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker search oracle

NAME                                  DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED
oraclelinux                           Official Docker builds of Oracle Linux.         573                 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OK]
jaspeen/oracle-11g                    Docker image &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Oracle 11g database            99                                      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OK]
oracle/openjdk                        Docker images containing OpenJDK Oracle Linux   55                                      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OK]
……
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;212选择安装-jaspeenoracle-11g等待下载安装完成&quot;&gt;2.1.2、选择安装 jaspeen/oracle-11g，等待下载安装完成&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull jaspeen/oracle-11g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;213查看下载好的镜像&quot;&gt;2.1.3、查看下载好的镜像&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker images

REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE
jaspeen/oracle-11g         latest              0c8711fe4f0f        3 years ago         281MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意，这个镜像没有直接安装好oracle，他帮我们配置好了环境，提供了安装脚本，我们只需要按照要求把oracle的安装目录配置好，启动镜像，即可&lt;/p&gt;

&lt;h3 id=&quot;22准备oracle-11g安装文件&quot;&gt;2.2、准备oracle 11g安装文件&lt;/h3&gt;

&lt;h4 id=&quot;221下载oracle-11g安装文件&quot;&gt;2.2.1、下载oracle 11g安装文件&lt;/h4&gt;
&lt;p&gt;从&lt;a href=&quot;http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index-092322.html&quot;&gt;oracle 官网&lt;/a&gt;
下载所需要的安装包，这里我们以&lt;a href=&quot;https://www.oracle.com/technetwork/database/enterprise-edition/downloads/112010-linx8664soft-100572.html&quot;&gt;oracle 11g&lt;/a&gt;
为例子，分别下载 &lt;code class=&quot;highlighter-rouge&quot;&gt;linux.x64_11gR2_database_1of2.zip&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;linux.x64_11gR2_database_2of2.zip&lt;/code&gt;两个压缩包，下载完成后解压到D盘
(如下目录结构)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;D:.
└─oracleinstall
    └─database
        ├─doc
        ├─install
        ├─response
        ├─rpm
        ├─sshsetup
        ├─stage
        ├─runInstaller
        └─welcome.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;23安装oracle&quot;&gt;2.3、安装oracle&lt;/h3&gt;

&lt;h4 id=&quot;231注意事项&quot;&gt;2.3.1、注意事项&lt;/h4&gt;
&lt;p&gt;为什么要解压成上面的目录结构，我们先来看看&lt;code class=&quot;highlighter-rouge&quot;&gt;jaspeen/oracle-11g&lt;/code&gt;镜像提供的安装脚本&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /assets/colorecho

&lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;echo_red '******* ERROR: Something went wrong.'; exit 1&quot;&lt;/span&gt; SIGTERM
&lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;echo_red '******* Caught SIGINT signal. Stopping...'; exit 2&quot;&lt;/span&gt; SIGINT

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/install/database&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
	&lt;/span&gt;echo_red &lt;span class=&quot;s2&quot;&gt;&quot;Installation files not found. Unzip installation files into mounted(/install) folder&quot;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;echo_yellow &lt;span class=&quot;s2&quot;&gt;&quot;Installing Oracle Database 11g&quot;&lt;/span&gt;

su oracle &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/install/database/runInstaller -silent -ignorePrereq -waitforcompletion -responseFile /assets/db_install.rsp&quot;&lt;/span&gt;
/opt/oracle/oraInventory/orainstRoot.sh
/opt/oracle/app/product/11.2.0/dbhome_1/root.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从脚本里可以看到它会读取&lt;code class=&quot;highlighter-rouge&quot;&gt;/install/database&lt;/code&gt;目录，如果不存在会给出提示&lt;code class=&quot;highlighter-rouge&quot;&gt;Installation files not found. Unzip installation files into mounted(/install) folder&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;232启动镜像执行安装oracle&quot;&gt;2.3.2、启动镜像（执行安装oracle）&lt;/h4&gt;

&lt;p&gt;命令的解释：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;docker run 启动容器的命令&lt;/li&gt;
  &lt;li&gt;privileged 给这个容器特权，安装oracle可能需要操作需要root权限的文件或目录&lt;/li&gt;
  &lt;li&gt;name 给这个容器名一个名字&lt;/li&gt;
  &lt;li&gt;p 映射端口&lt;/li&gt;
  &lt;li&gt;v 挂在文件到容器指定目录 (&lt;code class=&quot;highlighter-rouge&quot;&gt;d:/oracleinstall/database&lt;/code&gt; 对应容器 &lt;code class=&quot;highlighter-rouge&quot;&gt;/install/database&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;jaspeen/oracle-11g 代表启动指定的容器&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; oracle11g &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 1521:1521 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; d:/oracleinstall:/install jaspeen/oracle-11g

Database is not installed. Installing...
Installing Oracle Database 11g
Starting Oracle Universal Installer...

Checking Temp space: must be greater than 120 MB.   Actual 47303 MB    Passed
Checking swap space: must be greater than 150 MB.   Actual 1023 MB    Passed
Preparing to launch Oracle Universal Installer from /tmp/OraInstall2019-04-17_08-14-23AM. Please &lt;span class=&quot;nb&quot;&gt;wait&lt;/span&gt; ...
You can find the log of this &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;session at:
 /opt/oracle/oraInventory/logs/installActions2019-04-17_08-14-23AM.log
 ……
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个安装过程会很漫长，日志也很多，这里只提供部分。注意到日志里有 &lt;code class=&quot;highlighter-rouge&quot;&gt;100% complete&lt;/code&gt; 打印，代表oracle安装成功&lt;/p&gt;

&lt;h4 id=&quot;233安装完成&quot;&gt;2.3.3、安装完成&lt;/h4&gt;

&lt;p&gt;再次查看运行状态，oracle已经启动完成&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;

CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS                      PORTS                                                                             NAMES
7f53f07c93e5        jaspeen/oracle-11g   &lt;span class=&quot;s2&quot;&gt;&quot;/assets/entrypoint.…&quot;&lt;/span&gt;   About an hour ago   Up About an hour            0.0.0.0:1521-&amp;gt;1521/tcp, 8080/tcp                                                  oracle11g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;234其他需要注意的如果日志长时间没有更新检查docker是否已经死掉&quot;&gt;2.3.4、其他需要注意的，如果日志长时间没有更新，检查docker是否已经死掉&lt;/h4&gt;

&lt;p&gt;查看docker的状态&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error response from daemon: An invalid argument was supplied.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果出现如上提示，表示docker已经死掉，我们只需要重新执行安装步骤，让oracle安装完成&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;ps:根据我的猜测，我给docker分配的资源不够导致的，我重新把docker的内存和cpu调高一点后oracle顺利安装完成。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;oracle11g
docker run &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; oracle11g &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 1521:1521 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; oracleinstall:/install jaspeen/oracle-11g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;三配置&quot;&gt;三，配置&lt;/h2&gt;

&lt;p&gt;默认scott用户是被锁定的，我们需要解锁，通过数据库工具即可成功连接到oracle&lt;/p&gt;

&lt;h3 id=&quot;31连接到容器&quot;&gt;3.1，连接到容器，&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; oracle11g /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;32切换到oracle用户然后连接到sql控制台&quot;&gt;3.2，切换到oracle用户，然后连接到sql控制台&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@7f53f07c93e5 /]# su - oracle
Last login: Wed Apr 17 08:29:31 UTC 2019
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;oracle@7f53f07c93e5 ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sqlplus / as sysdba

SQL&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;Plus: Release 11.2.0.1.0 Production on Wed Apr 17 09:29:49 2019

Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 1982, 2009, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

SQL&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;33解锁账户&quot;&gt;3.3，解锁账户&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SQL&amp;gt; alter user scott account unlock&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
User altered.
SQL&amp;gt; commit&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
Commit complete.
SQL&amp;gt; conn scott/tiger
ERROR:
ORA-28001: the password has expired
Changing password &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;scott
New password:
Retype new password:
Password changed
Connected.
SQL&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;34使用datagrip连接oracle数据库&quot;&gt;3.4，使用dataGrip连接oracle数据库&lt;/h3&gt;
&lt;p&gt;数据库安装完成后，使用默认的sid为orcl，端口为1521，scott/tiger即可连接
&lt;img src=&quot;/assets/images/post/linux/docker/datagrip-oracle.png&quot; alt=&quot;datagrid连接oracle&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Reference:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;https://zh.wikipedia.org/wiki/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93&lt;/li&gt;
    &lt;li&gt;https://hub.docker.com/r/jaspeen/oracle-11g&lt;/li&gt;
    &lt;li&gt;https://stackoverflow.com/questions/37468788/what-is-the-right-way-to-add-data-to-an-existing-named-volume-in-docker&lt;/li&gt;
    &lt;li&gt;https://hub.docker.com/_/busybox&lt;/li&gt;
    &lt;li&gt;http://blog.grayidea.cn/archives/67&lt;/li&gt;
    &lt;li&gt;https://blog.csdn.net/u013238950/article/details/50999401&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>单思义</name><email>keith@thxopen.com</email></author><category term="oracle 11g" /><category term="docker" /><summary type="html">一，简介 Oracle Database，又名Oracle RDBMS，或简称Oracle。是甲骨文公司的一款关系数据库管理系统。 借助docker，安装oracle不再困难，只需要几步即可。 需要注意，在参考本文章之前，需要具备操作docker的基础，怎么使用docker，可以参考这里 二，安装 2.1、安装oracle 11g镜像到docker 2.1.1、搜索符合条件的镜像 docker search oracle NAME DESCRIPTION STARS OFFICIAL AUTOMATED oraclelinux Official Docker builds of Oracle Linux. 573 [OK] jaspeen/oracle-11g Docker image for Oracle 11g database 99 [OK] oracle/openjdk Docker images containing OpenJDK Oracle Linux 55 [OK] …… 2.1.2、选择安装 jaspeen/oracle-11g，等待下载安装完成 docker pull jaspeen/oracle-11g 2.1.3、查看下载好的镜像 docker images REPOSITORY TAG IMAGE ID CREATED SIZE jaspeen/oracle-11g latest 0c8711fe4f0f 3 years ago 281MB 注意，这个镜像没有直接安装好oracle，他帮我们配置好了环境，提供了安装脚本，我们只需要按照要求把oracle的安装目录配置好，启动镜像，即可 2.2、准备oracle 11g安装文件 2.2.1、下载oracle 11g安装文件 从oracle 官网 下载所需要的安装包，这里我们以oracle 11g 为例子，分别下载 linux.x64_11gR2_database_1of2.zip 和 linux.x64_11gR2_database_2of2.zip两个压缩包，下载完成后解压到D盘 (如下目录结构) D:. └─oracleinstall └─database ├─doc ├─install ├─response ├─rpm ├─sshsetup ├─stage ├─runInstaller └─welcome.html 2.3、安装oracle 2.3.1、注意事项 为什么要解压成上面的目录结构，我们先来看看jaspeen/oracle-11g镜像提供的安装脚本 #!/usr/bin/env bash set -e source /assets/colorecho trap &quot;echo_red '******* ERROR: Something went wrong.'; exit 1&quot; SIGTERM trap &quot;echo_red '******* Caught SIGINT signal. Stopping...'; exit 2&quot; SIGINT if [ ! -d &quot;/install/database&quot; ]; then echo_red &quot;Installation files not found. Unzip installation files into mounted(/install) folder&quot; exit 1 fi echo_yellow &quot;Installing Oracle Database 11g&quot; su oracle -c &quot;/install/database/runInstaller -silent -ignorePrereq -waitforcompletion -responseFile /assets/db_install.rsp&quot; /opt/oracle/oraInventory/orainstRoot.sh /opt/oracle/app/product/11.2.0/dbhome_1/root.sh 从脚本里可以看到它会读取/install/database目录，如果不存在会给出提示Installation files not found. Unzip installation files into mounted(/install) folder 2.3.2、启动镜像（执行安装oracle） 命令的解释： docker run 启动容器的命令 privileged 给这个容器特权，安装oracle可能需要操作需要root权限的文件或目录 name 给这个容器名一个名字 p 映射端口 v 挂在文件到容器指定目录 (d:/oracleinstall/database 对应容器 /install/database) jaspeen/oracle-11g 代表启动指定的容器 docker run --privileged --name oracle11g -p 1521:1521 -v d:/oracleinstall:/install jaspeen/oracle-11g Database is not installed. Installing... Installing Oracle Database 11g Starting Oracle Universal Installer... Checking Temp space: must be greater than 120 MB. Actual 47303 MB Passed Checking swap space: must be greater than 150 MB. Actual 1023 MB Passed Preparing to launch Oracle Universal Installer from /tmp/OraInstall2019-04-17_08-14-23AM. Please wait ... You can find the log of this install session at: /opt/oracle/oraInventory/logs/installActions2019-04-17_08-14-23AM.log …… 这个安装过程会很漫长，日志也很多，这里只提供部分。注意到日志里有 100% complete 打印，代表oracle安装成功 2.3.3、安装完成 再次查看运行状态，oracle已经启动完成 docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 7f53f07c93e5 jaspeen/oracle-11g &quot;/assets/entrypoint.…&quot; About an hour ago Up About an hour 0.0.0.0:1521-&amp;gt;1521/tcp, 8080/tcp oracle11g 2.3.4、其他需要注意的，如果日志长时间没有更新，检查docker是否已经死掉 查看docker的状态 docker ps -a Error response from daemon: An invalid argument was supplied. 如果出现如上提示，表示docker已经死掉，我们只需要重新执行安装步骤，让oracle安装完成 ps:根据我的猜测，我给docker分配的资源不够导致的，我重新把docker的内存和cpu调高一点后oracle顺利安装完成。 docker rm oracle11g docker run --privileged --name oracle11g -p 1521:1521 -v oracleinstall:/install jaspeen/oracle-11g 三，配置 默认scott用户是被锁定的，我们需要解锁，通过数据库工具即可成功连接到oracle 3.1，连接到容器， docker exec -it oracle11g /bin/bash 3.2，切换到oracle用户，然后连接到sql控制台 [root@7f53f07c93e5 /]# su - oracle Last login: Wed Apr 17 08:29:31 UTC 2019 [oracle@7f53f07c93e5 ~]$ sqlplus / as sysdba SQL*Plus: Release 11.2.0.1.0 Production on Wed Apr 17 09:29:49 2019 Copyright (c) 1982, 2009, Oracle. All rights reserved. Connected to: Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production With the Partitioning, OLAP, Data Mining and Real Application Testing options SQL&amp;gt; 3.3，解锁账户 SQL&amp;gt; alter user scott account unlock; User altered. SQL&amp;gt; commit; Commit complete. SQL&amp;gt; conn scott/tiger ERROR: ORA-28001: the password has expired Changing password for scott New password: Retype new password: Password changed Connected. SQL&amp;gt; 3.4，使用dataGrip连接oracle数据库 数据库安装完成后，使用默认的sid为orcl，端口为1521，scott/tiger即可连接 Reference: https://zh.wikipedia.org/wiki/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93 https://hub.docker.com/r/jaspeen/oracle-11g https://stackoverflow.com/questions/37468788/what-is-the-right-way-to-add-data-to-an-existing-named-volume-in-docker https://hub.docker.com/_/busybox http://blog.grayidea.cn/archives/67 https://blog.csdn.net/u013238950/article/details/50999401</summary></entry><entry><title type="html">使用logback限制日志打印内容长度</title><link href="http://www.thxopen.com/java/2019/04/12/limit-message-size-in-logback.html" rel="alternate" type="text/html" title="使用logback限制日志打印内容长度" /><published>2019-04-12T00:00:00+08:00</published><updated>2019-04-12T00:00:00+08:00</updated><id>http://www.thxopen.com/java/2019/04/12/limit-message-size-in-logback</id><content type="html" xml:base="http://www.thxopen.com/java/2019/04/12/limit-message-size-in-logback.html">&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;好的日志打印，对于程序的调试和查找问题是很重要的。目前广泛使用的是logback，配合&lt;a href=&quot;//projectlombok.org&quot;&gt;lombok&lt;/a&gt;可以很方便
的打印日志。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogExampleOther&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Something else is wrong here&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;只需要在类上加上&lt;code class=&quot;highlighter-rouge&quot;&gt;@Slf4j&lt;/code&gt;注解即可&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;问题背景&quot;&gt;问题背景&lt;/h2&gt;

&lt;p&gt;由于在实际开发过程中打印日志内容的长度是不可控的，我想在输出的时候控制内容长度，于是我书写如下代码：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogExampleOther&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Something else is wrong here&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;the content length over limit ，only show the part of front : {} &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;the content is {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;

&lt;p&gt;时隔多日，发现这样非常不友好，随着需要控制的地方越来越多，这个代码重复出现在项目的各个地方。我想有没有什么配置可以设置日志
输出的最大长度呢？一番搜索后最终在&lt;a href=&quot;https://logback.qos.ch/manual/layouts.html#formatModifiers&quot;&gt;logback的文档&lt;/a&gt;里找到了答案，原来官方已经提供了方法。&lt;/p&gt;

&lt;p&gt;以下是文档原文：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;By default the relevant information is output as-is. However, with the aid of format modifiers it is possible to change 
the minimum and maximum width and the justifications of each data field.&lt;/p&gt;

  &lt;p&gt;The optional format modifier is placed between the percent sign and the conversion character or word.&lt;/p&gt;

  &lt;p&gt;The first optional format modifier is the left justification flag which is just the minus (-) character. 
Then comes the optional minimum field width modifier. This is a decimal constant that represents the minimum number of 
characters to output. If the data item contains fewer characters, it is padded on either the left or the right until 
the minimum width is reached. The default is to pad on the left (right justify) but you can specify right padding with 
the left justification flag. The padding character is space. If the data item is larger than the minimum field width, 
the field is expanded to accommodate the data. The value is never truncated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;默认情况下输出给定的字符串，但借助修饰符可以配置最小和最大长度。在%和转换字符之间使用&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;（点）和&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;（减号）截断字符串&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;%-4relative [%thread] %-5level - %.-1024msg%n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面的输出模板会把超过1024个字符的输出截断，只显示前1024个字符。&lt;/p&gt;

&lt;p&gt;最终通过查询文档解决了我以前的疑问，让代码更加简洁。&lt;/p&gt;

&lt;h2 id=&quot;logback的转换符对照表&quot;&gt;logback的转换符对照表&lt;/h2&gt;

&lt;p&gt;为了配置适合自己的日志格式，我们必须弄清楚转换字符的意思，下面附一张logback的转换符对照表&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;转换字符&lt;/th&gt;
      &lt;th&gt;效果&lt;/th&gt;
      &lt;th&gt;解释&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;c{length}  &lt;br /&gt; lo{length} &lt;br /&gt;  logger{length}&lt;/td&gt;
      &lt;td&gt;%logger mainPackage.sub.sample.Bar mainPackage.sub.sample.Bar&lt;/td&gt;
      &lt;td&gt;原始记录器名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;%logger{5} mainPackage.sub.sample.Bar m.s.s.Bar&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C{length} &lt;br /&gt;  class{length}&lt;/td&gt;
      &lt;td&gt;%C mainPackage.sub.sample.Bar mainPackage.sub.sample.Bar&lt;/td&gt;
      &lt;td&gt;记录器所在类的全路径&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;contextName/cn&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;原始记录器上下文名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;d{pattern} &lt;br /&gt;  date{pattern} &lt;br /&gt;  d{pattern, timezone}  &lt;br /&gt; date{pattern, timezone}&lt;/td&gt;
      &lt;td&gt;%d 2019-4-12 18:01:54,123&lt;/td&gt;
      &lt;td&gt;日志打印时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;%date{HH:mm:ss.SSS} 18:01:54.123&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;F/file&lt;/td&gt;
      &lt;td&gt;%F Bar.java&lt;/td&gt;
      &lt;td&gt;java文件名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;caller{depth}&lt;br /&gt; caller{depthStart..depthEnd} &lt;br /&gt; caller{depth, evaluator-1, … evaluator-n} &lt;br /&gt; caller{depthStart..depthEnd, evaluator-1, … evaluator-n}&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;记录器调用者位置信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;L / line&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;日志输出所在文件的行号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;m / msg / message&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;日志具体内容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;M / method&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;方法名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;n&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;换行符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;p / le / level&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;日志级别&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;r / relative&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;输出自应用程序启动以来直到创建日志记录事件所经过的毫秒数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;t / thread&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;当前线程的名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;X{key:-defaultVal} &lt;br /&gt;  mdc{key:-defaultVal}&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;输出与生成日志记录事件的线程关联的MDC（映射的诊断上下文）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ex{depth} &lt;br /&gt;  exception{depth}  &lt;br /&gt; throwable{depth}  &lt;br /&gt; ex{depth, evaluator-1, …, evaluator-n} &lt;br /&gt;  exception{depth, evaluator-1, …, evaluator-n}  &lt;br /&gt; throwable{depth, evaluator-1, …, evaluator-n}&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;输出与日志记录事件关联的异常的堆栈信息。默认情况下，将输出完整堆栈&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;xEx{depth} &lt;br /&gt;  xException{depth} &lt;br /&gt;  xThrowable{depth}  &lt;br /&gt; xEx{depth, evaluator-1, …, evaluator-n} &lt;br /&gt;  xException{depth, evaluator-1, …, evaluator-n} &lt;br /&gt;  xThrowable{depth, evaluator-1, …, evaluator-n}&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;与上面的％throwable相同，但添加了类包装信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nopex/nopexception&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;不输出任何信息，有效的忽略了异常&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;marker&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;输出与记录器请求关联的标记&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;property{key}&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;输出名为key属性关联的值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;replace(p){r, t}&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;替换‘p’内容中‘r’为‘t’，正则表达式操作&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rEx{depth}  &lt;br /&gt; rootException{depth}  &lt;br /&gt; rEx{depth, evaluator-1, …, evaluator-n}  &lt;br /&gt; rootException{depth, evaluator-1, …, evaluator-n}&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;输出与日志记录事件关联的异常的堆栈&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;Reference:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;https://logback.qos.ch/manual/layouts.html#formatModifiers&lt;/li&gt;
    &lt;li&gt;https://stackoverflow.com/questions/35710008/limit-message-size-in-logback&lt;/li&gt;
    &lt;li&gt;https://stackoverflow.com/questions/32704470/can-a-logback-message-field-be-truncated-trimmed-to-n-characters&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>单思义</name><email>keith@thxopen.com</email></author><category term="logback" /><category term="layout" /><category term="pattern" /><summary type="html">简介 好的日志打印，对于程序的调试和查找问题是很重要的。目前广泛使用的是logback，配合lombok可以很方便 的打印日志。 @Slf4j public class LogExampleOther { public static void main(String... args) { log.error(&quot;Something else is wrong here&quot;); } } 只需要在类上加上@Slf4j注解即可</summary></entry><entry><title type="html">在Docker上安装常用的和Java相关的工具</title><link href="http://www.thxopen.com/linux/docker/2019/03/11/install-java-ee-environment-on-docker.html" rel="alternate" type="text/html" title="在Docker上安装常用的和Java相关的工具" /><published>2019-03-11T00:00:00+08:00</published><updated>2019-03-11T00:00:00+08:00</updated><id>http://www.thxopen.com/linux/docker/2019/03/11/install-java-ee-environment-on-docker</id><content type="html" xml:base="http://www.thxopen.com/linux/docker/2019/03/11/install-java-ee-environment-on-docker.html">&lt;p&gt;之前已经写过&lt;a href=&quot;/linux/2018/02/27/install-java-ee-environment-on-ubuntu.html&quot;&gt;在Ubuntu上安装常用的和Java相关的工具&lt;/a&gt;,
这次要说的是如何在docker上安装这些工具。&lt;/p&gt;

&lt;p&gt;何为Docker？&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Docker是一个开放源代码软件项目，让应用程序部署在软件货柜下的工作可以自动化进行，借此在Linux操作系统上，
提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://wiki.jikexueyuan.com/project/docker-technology-and-combat/why.html&quot;&gt;为什么要使用Docker？&lt;/a&gt;已经有现成的了，我就不再多说。
之所以写这个，就是觉得Docker给我带来极大的便利，我同样希望更多人能够享受到Docker带来的好处。&lt;/p&gt;

&lt;p&gt;我一直有听说Docker，但一直没有揭开她神秘的面纱。终于我忍不住了，由于一次服务器故障，因为同事执行apt-get命令安装了新的软件，
导致系统环境变量发生了改变，导致ssh服务异常，大家都不能远程连上服务器。这个问题在服务器上一直存在，之前不知道什么原因把&lt;/p&gt;

&lt;p&gt;让我下决心要去了解Docker。&lt;/p&gt;

&lt;p&gt;/usr/local/lib/libssl.so.1.0.0
/usr/local/lib/libcrypto.so.1.0.0&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Reference:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;https://zh.wikipedia.org/wiki/Docker&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>单思义</name><email>keith@thxopen.com</email></author><category term="ubuntu" /><category term="rabbitmq" /><category term="nginx" /><category term="redis" /><category term="jdk" /><category term="mysql" /><category term="jenkins" /><category term="gitlab" /><category term="mongodb" /><summary type="html">之前已经写过在Ubuntu上安装常用的和Java相关的工具, 这次要说的是如何在docker上安装这些工具。 何为Docker？ Docker是一个开放源代码软件项目，让应用程序部署在软件货柜下的工作可以自动化进行，借此在Linux操作系统上， 提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。 为什么要使用Docker？已经有现成的了，我就不再多说。 之所以写这个，就是觉得Docker给我带来极大的便利，我同样希望更多人能够享受到Docker带来的好处。 我一直有听说Docker，但一直没有揭开她神秘的面纱。终于我忍不住了，由于一次服务器故障，因为同事执行apt-get命令安装了新的软件， 导致系统环境变量发生了改变，导致ssh服务异常，大家都不能远程连上服务器。这个问题在服务器上一直存在，之前不知道什么原因把 让我下决心要去了解Docker。 /usr/local/lib/libssl.so.1.0.0 /usr/local/lib/libcrypto.so.1.0.0 Reference: https://zh.wikipedia.org/wiki/Docker</summary></entry></feed>